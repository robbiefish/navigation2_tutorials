/gq7/microstrain_inertial_driver:
  ros__parameters:
    port: /dev/microstrain_main  # Assuming you only have one GQ7 plugged in, this should point to the GQ7, if you have multiple microstrain devices, change this to /dev/microstrain_main_<serial_number>

    timestamp_source: 2  # Use the GQ7 timestamp to correct the ROS timestamp of when the data was collected

    gnss1_frame_id       : "right_antenna_link"  # Tells us which frame_id we should look for in the tf tree for the GNSS1 antenna. This should match the frame ID configured in your robot description
    gnss2_frame_id       : "left_antenna_link"  # Tells us which frame_id we should look for in the tf tree for the GNSS2 antenna. This should match the frame ID configured in your robot description
    gnss1_antenna_offset_source : 2  # Tells the driver to look for the GNSS1 antenna offsets in the tf tree
    gnss2_antenna_offset_source : 2  # Tells the driver to look for the GNSS2 antenna offsets in the tf tree

    filter_enable_gnss_antenna_cal     : True  # Tells the GQ7 to correct for errors in the configured antenna offsets
    filter_gnss_antenna_cal_max_offset : 0.1  # Tells the GQ7 that it should only correct for errors up to 10cm

    rtk_dongle_enable: True  # Tells the GQ7 to produce NMEA sentences on the aux port, and receive RTCM on the aux port

    filter_enable_gnss_pos_vel_aiding     : True  # Use GNSS for position and velocity aiding
    filter_enable_gnss_heading_aiding     : True  # Use GNSS for heading aiding
    filter_enable_altimeter_aiding        : False  # Disable altimeter for this use-case
    filter_enable_odometer_aiding         : False  # Disable odometer as we do not have one connected
    filter_enable_magnetometer_aiding     : False  # Disable magnetometer as dual antenna heading is more accurate and reliable in this use-case
    filter_enable_external_heading_aiding : False  # Disable external heading as we will be using heading computed on the GQ7

    filter_init_condition_src              : 0  # Setting this to 0 means auto position, velocity and attitude
    filter_auto_heading_alignment_selector : 1  # Tells the GQ7 to use dual antenna heading to align it's heading startup
    filter_init_reference_frame            : 2  # Not used in this example, but this would determine the frame of the following keys (1 - WGS84 ECEF, 2 - WGS84 LLH)
    filter_init_position : [0.0, 0.0, 0.0]  # Not used in this example, but if filter_init_condition_src was 3, this would determine the starting position for the filter.
    filter_init_velocity : [0.0, 0.0, 0.0]  # Not used in this example, but if filter_init_condition_src was 3, this would determine the starting velocity for the filter.
    filter_init_attitude : [0.0, 0.0, 0.0]  # Not used in this example, but if filter_init_condition_src was 1, the third component would determine the starting heading, and if filter_condition_src was 2, this would determine the starting roll, pitch, and heading for the filter.

    filter_auto_init : True  # Tells the GQ7 to auto initialize the GQ7, and not wait for us to manually initialize it later

    filter_reset_after_config : True  # Tells the driver to reset the filter after configuring. Most of the time this is desired to make sure all changes to filter config get a chance to have an affect at the same time.

    filter_pps_source : 1  # Tells the GQ7 to get it's PPS from GNSS antenna 1

    use_enu_frame : True  # This will cause the node to convert any NED measurements to ENU
                          # This will also cause the node to convert any vehicle frame measurements to the ROS definition of a vehicle frame

    frame_id          : 'gq7_link'                 # Frame ID of all of the filter messages. Represents the location of the GQ7 in the tf tree. This should match up with the name we gave the GQ7 in the urdf.xacro file
    map_frame_id      : "map"                      # Frame ID of the local tangent plane.
    earth_frame_id    : "earth"                    # Frame ID of the global (ECEF) frame
    target_frame_id   : "base_link"                # Frame ID that we will publish a transform to. For this example, we will go directly to base_link, if you were running robot_localization, you could change this to odom
                                                  # Note that there MUST be a path of transforms between target_frame_id and frame_id

    publish_mount_to_frame_id_transform : False  # Disable the transform from the mount_frame_id to frame_id as we have configured it in our test robot description

    tf_mode: 2  # This tells the driver to publish the earth_frame_id -> map_frame_id and map_frame_id to target_frame_id transforms.

    filter_relative_position_config : True  # Tell the driver to setup the local tangent plane
    filter_relative_position_source : 2  # The local tangent plane will be placed at the first position after the GQ7 enters full nav
    filter_relative_position_frame  : 2  # Not used in this example, this will determine the frame that filter_relative_position_ref is in. (1 - WGS84 ECEF, 2 - WGS84 LLH)
    filter_relative_position_ref    : [0.0, 0.0, 0.01]  # Not used in this example, this will determine the starting location of the local tangent plane. Useful if you want to send waypoints in the map frame and have your robot travel to the same location.

    imu_data_rate : 0  # The driver wants to publish raw IMU data by default, but we don't need it for our use-case. If you do decide to use robot_localization though, this can help the performance of robot_localization

    # The default is to publish LLH position and velocity from both receivers, but nav2 and rviz can't consume those, so we will turn them off.
    # Additionally, this data comes directly from the GNSS receivers and does not benefit from the filter running on the GQ7
    gnss1_llh_position_data_rate   : 0
    gnss1_velocity_data_rate       : 0
    gnss1_odometry_earth_data_rate : 0
    gnss2_llh_position_data_rate   : 0
    gnss2_velocity_data_rate       : 0
    gnss2_odometry_earth_data_rate : 0

    filter_human_readable_status_data_rate : 1  # This human readable status message is a useful topic to view on the command line to view the overall status of the GQ7

    filter_odometry_map_data_rate : 100  # This data rate will determine the speed at which we publish the odometry message in the map frame as well as the transform from map_frame_id -> target_frame_id
